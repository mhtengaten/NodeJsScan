<rules>
 
  <!-- All String Comparison Rules Go here -->


 <rule name="Server Side Injection(SSI) - eval()">
 <signature>eval(</signature>
  <description>User controlled data in eval() can result in Server Side Injection (SSI) or Remote Code Execution (RCE).</description>
 </rule>

  <rule name="Server Side Injection(SSI) -setInterval()">
 <signature>setInterval(</signature>
  <description>User controlled data in 'setInterval()' can result in Server Side Injection (SSI) or Remote Code Execution (RCE).</description>
 </rule>

  <rule name="Server Side Injection(SSI) - setTimeout()">
 <signature>setTimeout(</signature>
  <description>User controlled data in 'setTimeout()' can result in Server Side Injection (SSI) or Remote Code Execution (RCE).</description>
 </rule>

  <rule name="Server Side Injection(SSI) - new Function()">
 <signature>new Function(</signature>
  <description>User controlled data in 'new Function()' can result in Server Side Injection (SSI) or Remote Code Execution (RCE).</description>
 </rule>

 <rule name="Express BodyParser Tempfile Creation Issue">
  <signature>bodyParser()</signature>
  <description>POST Request to Express Body Parser 'bodyParser()' can create Temporary files and consume space.</description>
 </rule>

  <rule name="Handlebars Unescaped String">
  <signature>handlebars.SafeString(</signature>
  <description>Handlebars SafeString will not escape the data passed through it. Untrusted user input passing through SafeString can cause XSS.</description>
 </rule>

<!--
  <rule name="JavaScript == identified">
  <signature>==</signature>
  <description>Use '===' instead of '==' if applicable.</description>
 </rule>
 -->

 <!-- All Regex Rules Go here -->


 <regex name="Remote OS Command Execution">
  <signature>(\()*('|")*child_process('|")*(\))*.exec(\()*</signature>
  <description>User controlled data in 'child_process.exec()' can result in Remote OS Command Execution.</description>
 </regex>

 <regex name="Accept Self Signed Certificates">
  <signature>(\[)*('|")*NODE_TLS_REJECT_UNAUTHORIZED('|")*(\])*(\s)*=(\s)*('|")*0('|")*</signature>
  <description>'Setting 'NODE_TLS_REJECT_UNAUTHORIZED' to 0 will allow node server to accept self signed certificates and is not an secure behaviour.</description>
 </regex> 

 <regex name="Escaping is Disabled">
  <signature>noEscape(\s)*:(\s)*true</signature>
  <description>Disabling Escaping is not a secure behaviour.</description>
 </regex>

 <regex name="node-curl SSL Verification is Disabled">
  <signature>SSL_VERIFYPEER(\s)*:(\s)*0</signature>
  <description>SSL Certificate verification for node-curl is disabled.</description>
 </regex>

<regex name="Weak Hash used - MD5">
  <signature>createHash\(('|")md5('|")</signature>
  <description>MD5 is a a weak hash which is known to have collision. Use a strong hashing function.</description>
</regex>

<regex name="Weak Hash used - SHA1">
  <signature>createHash\(('|")sha1('|")</signature>
  <description>SHA1 is a a weak hash which is known to have collision. Use a strong hashing function.</description>
</regex>

<regex name="Password Hardcoded">
  <signature>password(\s)*=(\s)*('|")</signature>
  <description>A hardcoded password in plain text was identified. Store it properly in a config file.</description>
</regex>

<regex name="Username Hardcoded">
  <signature>username(\s)*=(\s)*('|")</signature>
  <description>A hardcoded username in plain text was identified. Store it properly in a config file.</description>
</regex>

<regex name="Key Hardcoded">
  <signature>key(\s)*=(\s)*('|")</signature>
  <description>A hardcoded key in plain text was identified.</description>
</regex>
<regex name="XSS Filter is turned off">
  <signature>lusca.xssProtection\(false\)|X-XSS-Protection('|")*(\s)*(:|,)(\s)*('\"")*0</signature>
  <description>X-XSS-Protection header is set to 0. This will disable the browser's XSS Filter.</description>
</regex>
<!-- All missing Secure Code goes here -->
<!---if express is used express.limit\(('|")-->
 <!--end if-->
 <notpresent name="Use Strict">
  <signature>("|')use strict("|');</signature>
  <description>Strict Mode allows you to place a program, or a function, in a "strict" operating context. This strict context prevents certain actions from being taken and throws more exceptions.</description>
 </notpresent>

 <notpresent name="Missing Security Header - Content-Security-Policy (CSP)">
  <signature>require\(('|")helmet-csp('|")\)|helmet.csp|lusca.csp\(|Content-Security-Policy</signature>
  <description>Content Security Policy (CSP), a mechanism web applications can use to mitigate a broad class of content injection vulnerabilities, such as cross-site scripting (XSS). CSP Header was not found.</description>
 </notpresent>

 <notpresent name="Missing Security Header - X-Frame-Options (XFO)">
  <signature>helmet.xframe|lusca.xframe\(|require\(('|")frameguard('|")\)|frameguard\(|X-Frame-Options</signature>
  <description>X-Frame-Options (XFO) header provides protection against Clickjacking attacks.</description>
 </notpresent>

 <notpresent name="Missing Security Header - Strict-Transport-Security (HSTS)">
  <signature>helmet.hsts\({|lusca.hsts\({|hsts\({|require\(('|")hsts('|")\)|Strict-Transport-Security</signature>
  <description>Strict-Transport-Security (HSTS) header enforces secure (HTTP over SSL/TLS) connections to the server.</description>
 </notpresent>

 <notpresent name="Missing Security Header - Public-Key-Pins (HPKP)">
  <signature>Public-Key-Pins(:|,)*</signature>
  <description>Public-Key-Pins (HPKP) ensures that certificate is Pinned.</description>
 </notpresent>

 <notpresent name="Missing Security Header - X-XSS-Protection:1">
  <signature>helmet.xssFilter\(\)|lusca.xssProtection\(true\)|X-XSS-Protection('|")*(\s)*(:|,)(\s)*('\"")*1</signature>
  <description>X-XSS-Protection header set to 1 enables the Cross-site scripting (XSS) filter built into most recent web browsers.</description>
 </notpresent>

 <notpresent name="Missing Security Header - X-Content-Type-Options">
  <signature>helmet.noSniff|require\(('|")dont-sniff-mimetype('|")\)|nosniff\(\)|X-Content-Type-Options('|")*(\s)*(:|,)(\s)*('\"")*nosniff</signature>
  <description>X-Content-Type-Options header prevents Internet Explorer and Google Chrome from MIME-sniffing a response away from the declared content-type.</description>
 </notpresent>

  <notpresent name="Missing Security Header - X-Download-Options: noopen">
  <signature>require\(('|")ienoopen('|")\)|ienoopen\(|helmet.ienoopen\(|X-Download-Options('|")*(\s)*(:|,)(\s)*('\"")*noopen</signature>
  <description>X-Download-Options header set to noopen prevents IE users from directly opening and executing downloads in your site's context.</description>
 </notpresent>
 
 <notpresent name="Missing 'httpOnly' in Cookie">
  <signature>httpOnly(\s)*:(\s)*true|httpOnly</signature>
  <description>JavaScript can access Cookies if they are not marked httpOnly.</description>
 </notpresent>

 <notpresent name="Infromation Disclosure - X-Powered-By">
  <signature>.disable\(('|")x-powered-by('|")\)|require\(('|")hide-powered-by('|")\)|hidePoweredBy\(|helmet.hidePoweredBy\(|removeHeader\(('|")X-Powered-By('|")\)</signature>
  <description>Remove the X-Powered-By header to prevent information gathering.</description>
 </notpresent>

</rules>
